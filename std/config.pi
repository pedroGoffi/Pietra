#package "pietra.config"
use std{std}
use std{list}



@string_comparator  
string_comparator  :: (s1: cstr, s2: cstr): i64 {
    if not s1 return false
    if not s2 return false
    
    return std.streq(s1, s2)
}


// NOTE: calling std.memcpy crashes in the binary file
@flag("struct_reassign") 
struct_reassign :: (dst: *i8, src: *i8, size: i64){    
    i: i64 = 0
    while i < size {
        dst[i] = src[i]
        i = i + 1
    }
    return dst    
}

// The idea for intern_range is only for ptr comparasion
intern_strings: mut *ll_list = std.allocate(sizeof(ll_list))
intern_range :: (begin: cstr, end: cstr): *i8
{
    node: mut *ll_node = intern_strings.head
    while node.value 
    {
        if std.cstrncmp(begin, node.value, end - begin) == 0
        {
            return node.value
        }
        node = node.next
    }        
    string: *i8 = std.allocate(end - begin + 1)
    std.memcpy(string, begin, end - begin)
    string[end - begin + 1] = 0
    intern_strings.push(string)
    return string
}

intern_str :: (str: *i8): *i8 
{
    return intern_range(str, str + std.strlen(str))
}

@flag("new_allocator")
new_allocator :: (item_nbytes: i64, list_items: i64): *any {    
    return std.allocate(list_items * item_nbytes)
}
