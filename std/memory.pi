#package "pietra.memory"
use std{std, errno}
// A mem poll is a limited amount of memory that contains all the pointers that are allocated

MEM_POLL_NUM_BLOCKS :: 20
MEM_POLL_BLOCKS_CAP :: 8 * MEM_POLL_NUM_BLOCKS
MEM_POLL_PAGE_SIZE  :: 4096
MEM_POLL :: {
    blocks_end:     mut *null
    blocks_begin:   mut *null
    blocks:         mut* mut* null
    size:           mut i64 
    cap:            mut i64
    ptr:            mut *null        
}
impl MEM_POLL {    
    constructor :: (self: *Self){
        self.blocks     = sbrk(MEM_POLL_BLOCKS_CAP)
        i: i64 = 0;
        while i < MEM_POLL_NUM_BLOCKS {
            self.blocks[i] = sbrk(MEM_POLL_PAGE_SIZE)
            i = i + 1;
        }
        self.size = 0
        self.ptr = self.blocks[self.size];
        self.blocks_begin   = self.ptr
        self.blocks_end     = self.blocks_begin + MEM_POLL_PAGE_SIZE        
        self.cap  = MEM_POLL_NUM_BLOCKS
    }
        
    grow :: (self: *Self){        
        if self.cap <= self.size 
            return -1

        self.size           = self.size + 1;
        self.ptr            = self.blocks[self.size]
        self.blocks_begin   = self.ptr
        self.blocks_end     = self.blocks_begin + MEM_POLL_PAGE_SIZE        
        self.cap            = MEM_POLL_NUM_BLOCKS                 
    }

    allocate :: (self: *Self, nbytes: i64): *any {
        if nbytes <= 0 return -1
        if self.ptr + nbytes > self.blocks_end {
            if self.grow() == -1 
                return -1;
        }

        ptr: *any = self.ptr;        
        self.ptr = self.ptr + nbytes;
        return ptr;
    }    
}

std_MEM_POLL: MEM_POLL

impl std{    
    allocate   :: (nbytes: i64): *any {
        return std_MEM_POLL.allocate(nbytes)
    }
}