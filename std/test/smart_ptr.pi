#package "std.test.smart_ptr"

use std{std}

// Note: the way you use it. is up to you. here is some methods i think might be usefull
@help("A smart pointer is used when u dont wanna to deal with pointer allocation, just to use it")
Smart_ptr :: {    
    data: mut *any    
}

impl Smart_ptr value_or :: (self: *Self, or_v: *any): *any {
    return self.data ?? or_v
}
impl Smart_ptr get :: (self: *Self): *any {
    return &self.data
}
impl Smart_ptr set :: (self: *Self, data: any){
    self.data = data;
}    
impl Smart_ptr release :: (self: *Self){
    self.data = null;
}    
impl Smart_ptr __eq__ :: (self: *Self, data: any){
    if self.data == 0 {
        self.set(data)
        return self
    }

    std.puts("[ERROR]: Smart_ptr can't be modified with '=' operator.\n")
    std.puts("[NOTE]: Try to use ptr.set(value)\n")
    exit(1)
}        
impl Smart_ptr delete :: (self: *Self){        
    self.release();
}


move :: (ptr: *any){
    value: *any = ptr;
    *ptr = nullptr
    return value
}