#package "pietra.file"
use std{std, errno}


O_RDONLY    :: 0
O_WRONLY    :: 1
O_RDWR      :: 2
O_CREAT     :: 64
O_EXCL      :: 128
O_TRUNC     :: 512
O_APPEND    :: 1024
S_ISUID     :: 2048
S_ISGID     :: 1024
S_ISVTX     :: 512
S_IREAD     :: 256
S_IWRITE    :: 128
S_IEXEC     :: 64
S_IRUSR     :: 256
S_IWUSR	    :: 128
S_IRWXU 	:: 448


FILE :: {
    start:  mut *i8
    end:    mut *i8
    ptr:    mut *i8
    size:   mut i64
    fd:     mut i64
    flags:  mut i64
    mode:   mut i64    
}

impl FILE is_open :: (self: *Self) return self.fd > 0



impl std {    

    fopen :: (filename: imut *i8, _flags: imut *i8): *FILE {
        // NOTE: to avoid _flags param ptr destruction
        flags: cstr = _flags;
        // TODO: parse flags
        mode: i64 = S_IRUSR | S_IWUSR as i64;
        file_flags: i64 = S_IRWXU | O_RDWR as i64;

        if std.streq(flags, "r") {
            mode = mode | O_RDONLY
        }

        if std.streq(flags, "w") {
            mode = mode | O_WRONLY | O_CREAT
        }
        

        
        f: *FILE = std.allocate(sizeof(FILE));
        f.fd = open(filename, mode, file_flags)
        f.ptr   = std.allocate(4096)
        f.size  = read(f.fd, f.ptr, 4096)
        f.start = f.ptr
        f.end   = f.start + f.size
        f.mode  = mode
        f.flags = file_flags
        return f;        
    }

    fclose :: (file: *FILE){
        close(file.fd);
    }    
}