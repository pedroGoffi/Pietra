#package "pietra.file"
use std{std}
use std::core{struct_stat}




FILE :: {
    start:  mut *i8
    end:    mut *i8
    ptr:    mut *i8
    size:   mut i64
    fd:     mut i64
    flags:  mut i64
    mode:   mut i64    
}

impl FILE is_open :: (self: *Self) return self.fd > 0



impl std fopen :: (filename: imut *i8, _flags: imut *i8): *FILE {
    // NOTE: to avoid _flags param ptr destruction
    flags: cstr = _flags;
    // TODO: parse flags
    mode: i64 = S_IRUSR | S_IWUSR as i64;
    file_flags: i64 = 0644 // S_IRWXU | O_RDWR as i64;
    if std.streq(flags, "r") {
        mode = mode | O_RDONLY
    }
    if std.streq(flags, "w") {
        mode = mode | O_WRONLY
    }
    
    
    f: *FILE = std.allocate(sizeof(FILE));
    f.fd = open(filename, mode, file_flags)
    f.ptr   = std.allocate(4096)
    f.size  = read(f.fd, f.ptr, 4096)
    f.start = f.ptr
    f.end   = f.start + f.size
    f.mode  = mode
    f.flags = file_flags
    return f;        
}

impl std fclose :: (file: *FILE){
    close(file.fd);
}    


impl std fputs :: (file: *FILE, msg: *i8): i64 
{
    std.fdputs(file.fd, msg)
}

impl std __init_basic_file_from_fd :: (fd: i64): *FILE {
    ptr: *FILE = std.allocate(sizeof(FILE))
    ptr.fd = fd
    return ptr
}

// Integer value	Name
// 0	    input	stdin
// 1	    output	stdout
// 2	    error	stderr
stdout: *FILE = std.__init_basic_file_from_fd(__fd_stdout)
stderr: *FILE = std.__init_basic_file_from_fd(__fd_stderr)
stdin:  *FILE = std.__init_basic_file_from_fd(__fd_stdin)
