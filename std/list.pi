#package "pietra.List"
use std{std}
use std::core{list_struct}



impl ll_list constructor :: (self: *Self){        
    self.head = self.end    = std.allocate(sizeof(ll_node))
    head: *ll_node          = self.head;
    head.next               = self.end        
    self.size               = 0
}
impl ll_list push :: (self: *Self, item: any) {
    new_node: *ll_node = std.allocate(sizeof(ll_node))
    end_node: *ll_node
    new_node.value = item
    new_node.next = nullptr

    if (self.size == 0) {
        self.head = new_node
        self.end = new_node
    } else {
        end_node = self.end
        end_node.next = new_node
        self.end = new_node
    }

    self.size = self.size + 1
}
impl ll_list at :: (self: *Self, index: i64): *any {
    if self.size <= index {
        std.puts("[ERROR]: ll_list.at index out of range\n")
        exit(1)
    }

    node: mut *ll_node = self.head
    i: i64 = 0
    while i < index {
        node = node.next
        i = i + 1
    }
    return &node.value
}
init_ll_list_ptr :: (): *ll_list {
    ll: mut *ll_list = std.allocate(sizeof(ll_list));
    ll.constructor()
    return ll
}

ll_push :: (list: *ll_list, item: any){    
    ptr: mut *ll_node   = list.end
    ptr.value           = item    
    ptr                 = ptr.next = std.allocate(sizeof(ll_node))            
    list.end            = ptr
    list.size           = list.size + 1
}

impl ll_list New :: (): *ll_list {
    ll: mut *ll_list = std.allocate(sizeof(ll_list));
    ll.constructor()    
    return ll
}


impl ll_list swap :: (self: *Self, idx1: i64, idx2: i64): void {
    v_idx1: *ll_node = self.at(idx1);
    v_idx2:  *ll_node = self.at(idx2)
    std.swap_ptr(&v_idx1.value, &v_idx2.value)
}

impl ll_list sort_by :: (self: *Self, sort_func: proc(i64, i64)){
    i: i64 = 0
    while i < self.size {
        j: i64 = 0
        while j < self.size {
            vi: *ll_node = self.at(i)
            vj: *ll_node = self.at(j)
            
            if sort_func(vi.value, vj.value){
                self.swap(i, j)
            }            
            j = j + 1
        }
        i = i + 1
    }
}

impl ll_list iter :: (self: *Self, func: proc(*any): *any): null {
    node: mut *ll_node = self.head
    while node != nullptr {
        func(node.value)
        node = node.next
    }
}
impl ll_list map :: (self: *Self, func: proc(any): any): *ll_list{
    ret: *ll_list = std.allocate(100)
    node: mut *ll_node = self.head
    while node.value 
    {
        got_v: *any = func(node.value)
        ret.push(got_v)
        node = node.next
    }
    return ret
}

impl ll_list self_map :: (self: *Self, func: proc(any): any): *ll_list{    
    node: mut *ll_node = self.head
    while node.value 
    {        
        node.value = func(node.value)
        node = node.next
    }    
}
impl ll_list self_map_ptr :: (self: *Self, func: proc(*any): any): *ll_list{    
    node: mut *ll_node = self.head
    while node.value 
    {        

        node.value = func(&node.value)
        node = node.next
    }    
}
