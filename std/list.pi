#package "std.vector"
use std{std}


__STD_LIST_CAP        :: 4096
__STD_LIST_ITEM_SIZE  :: 8
__STD_LIST_SIZE       :: __STD_LIST_ITEM_SIZE * __STD_LIST_CAP
List :: {
    __begin:    *null
    __ptr:      *null    
    __end:      *null    
    size:       i64
    cap:        i64    
}

impl List {
    constructor :: (self: *Self){
        self.__begin = std.allocate(__STD_LIST_SIZE)
        self.__ptr = self.__begin;        
        self.cap = __STD_LIST_CAP;
        self.__end = self.__begin + self.cap * __STD_LIST_ITEM_SIZE;
        self.size = 0;                
    }    
    __grow :: (self: *Self){
        // cant grow
        return false;
    }
    begin :: (self: *Self): any {
        return self.__begin as any
    }   
    end :: (self: *Self): any {
        return self.__begin + self.size + __STD_LIST_ITEM_SIZE;
    }    


    can_push :: (self: *Self){
        if self.__ptr + __STD_LIST_ITEM_SIZE > self.end() {
            return false;
        }

        return true;
    }
    
    push :: (self: *Self, item: any){
        if not self.can_push() {
            if self.__grow() == ENOMEM {
                set_errno(ENOMEM);
                return -1 as *any;
            }
        }

        *self.__ptr = item;
        self.size = self.size + 1;
        self.__ptr = self.__ptr + __STD_LIST_ITEM_SIZE;
    }

    back_ptr :: (self: *Self): *any {
        if self.size > 0 {
            return (self.__ptr - 8);
        }
        return self.__ptr;
    }

    
    back  :: (self: *Self): any {
        return *(self.back_ptr());
    }
    pop  :: (self: *Self){
        if self.size < 1 {
            std.puts("ERROR: trying to pop from an empty list.\n");
            exit(1)
        }        
        self.__ptr = self.__ptr - 8;
        self.size  = self.size - 1;
    }

    at :: (self: *Self, i: i64): *any{
        return self.begin() + i * __STD_LIST_ITEM_SIZE;
    }
}