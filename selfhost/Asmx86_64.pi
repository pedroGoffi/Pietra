#package "pietra.selfhost_assembler"
use std{std}
use std{list}
use std::core{types}
use selfhost{ast}

C_NONE      :: 0
C_GET_ADDR  :: 1
C_GOT_PROC  :: 2
state: i64 = C_NONE
out_buffer: *FILE = stdout

__label_count: i64 = 0
//////////////////////
addr_count :: (): i64
{
    __label_count = __label_count + 1
    return __label_count
}
makeLabelAt :: (addr: i64): null
{    
    repr: cstr = std.cstrcat(".L", std.itocstr(addr))
    repr = std.cstrcat(repr, ":\n")
    commit(repr)    
}

get_cp_label_end :: (){    
    end_label: mut *i8 = ".PE."
    end_label = std.cstrcat(end_label, current_proc.name)    
    return end_label
}
makeLabel   :: (): null
{
    addr: i64 = addr_count()
    makeLabelAt(addr)
}
code: *ll_list = init_ll_list_ptr()
commit :: (inst: *i8)
{    
    code.push(inst)
    std.fputs(out_buffer, inst)
}
// RAX UTILS
sub_reg_by_i64 :: (reg: *i8, by: i64)
{
    inst: mut *i8 = "\tsub "
    inst = std.cstrcat(inst, reg)
    inst = std.cstrcat(inst, ", ")
    inst = std.cstrcat(inst, std.itocstr(by))
    inst = std.cstrcat(inst, "\n")
    commit(inst)
}
mov_rax_to_i64 :: (i: i64)
{
    inst: mut *i8 = std.cstrcat("\tmov rax, ", std.itocstr(i))
    inst = std.cstrcat(inst, "\n")            
    commit(inst)
}
mov_rax_to_string_addr :: (id: i64)
{    
    inst: mut *i8 = std.itocstr(id)
    inst = std.cstrcat("S", inst)
    inst = std.cstrcat("\tmov rax, ", inst)
    inst = std.cstrcat(inst, "\n")            
    commit(inst)
}
add_to_rax :: (reg: *i8)
{
    inst: mut *i8 = "\tadd rax, "
    inst = std.cstrcat(inst, reg)
    inst = std.cstrcat(inst, "\n")
    commit(inst)
}
get_addr_str :: (addr: addr_t): imut *i8 
{
    addr_str: mut *i8 = ".L"
    addr_str = std.cstrcat(addr_str, std.itocstr(addr))
    return addr_str
}
jmp_inst_addr :: (j_inst: imut *i8, addr: addr_t)
{
    inst: mut *i8 = "\t"
    inst = std.cstrcat(inst, j_inst)
    inst = std.cstrcat(inst, " ")
    inst = std.cstrcat(inst, get_addr_str(addr))
    inst = std.cstrcat(inst, "\n")
    commit(inst)
}
jmp_inst_label :: (jmp_kind:*i8, label: *i8){
    inst: mut *i8 = "\t"
    inst = std.cstrcat(inst, jmp_kind)
    inst = std.cstrcat(inst, " ")
    
    inst = std.cstrcat(inst, label)    
    inst = std.cstrcat(inst, "\n")
    commit(inst)
    
}
////////////////////
push :: (reg: *i8) 
{
    inst: mut *i8 = "\tpush "
    inst = std.cstrcat(inst, reg)
    inst = std.cstrcat(inst, "\n")    
    commit(inst)
}
pop :: (reg: *i8)
{
    inst: mut *i8 = "\tpop "
    inst = std.cstrcat(inst, reg)
    inst = std.cstrcat(inst, "\n")    
    commit(inst)
}
get_word_size :: (size: i64){
    switch(size){            
        case 1:     return "BYTE"
        case 2:     return "WORD"
        case 4:     return "DWORD"
        default:    return "QWORD"
    }
}
lea :: (var: *Var){
    if var.is_global 
    {
        std.puts("[ERROR]: lea for global is unimplemented.\n")
        exit(1)
    }
    // Local variables
    var_type: *Type = var.type
    stack_offset: i64 = var_type.size
    inst: mut *i8 = "\tlea rax, "
    inst = std.cstrcat(inst, get_word_size(var_type.size))
    inst = std.cstrcat(inst, " [rbp - ")
    inst = std.cstrcat(inst, std.itocstr(stack_offset))
    inst = std.cstrcat(inst, "]\n")

    commit(inst)            
}
compile_name    :: (name: *i8): *Type 
{
    if local: *Var = current_proc.find_its_local(name){
        lea(local)

        return local.type        
    }
    if type: *Type = type_get(name)
        return type
    
    if ce: *Constexpr = Constexpr.find(name) return compile_expr(ce.expr)

    
    puts_va("[ERROR]: the name '", name, "' not found in this scope\n")
    exit(1)
}
compile_local_var :: (name: *i8, ty: *Type, init: *Expr): *Type {        
    var: *Var = current_proc.find_its_local(name)
    if not var{
        puts_va("[ERROR]: Couldn't find the local variable '", name, "'\n")
        exit(1)
    }

    if init {
        eq: *Expr = expr_binary(TK_EQ, expr_name(name), init)
        compile_expr(eq)
    }
    return ty
}
is_expr_assign :: (kind: i64){
    switch kind {
        case TK_EQ: return true
        default: return false
    }
}
store    :: (){
    pop("rdi")
    commit("\tmov [rdi], rax\n")   
}
store_ds :: (dst: *Type, src: *Type): null 
{
    return store()
}
compile_assign :: (kind: i64, base: *Expr, rhs: *Expr): *Type 
{
    lhs_t: *Type = compile_expr(base)
    push("rax")
    rhs_t: *Type compile_expr(rhs)
    store_ds(lhs_t, rhs_t)
}
compile_expr :: (e: *Expr): *Type
{    
    inst: mut *i8
    switch e.kind 
    {
        case EXPR_INT:      return mov_rax_to_i64(e.int_lit)                    
        case EXPR_STRING:   return mov_rax_to_string_addr(create_global_string(e.name_lit))            
        
        case EXPR_BINARY:
        {         
            if is_expr_assign(e.tkKind)
                return compile_assign(e.tkKind, e.lhs, e.rhs)
            compile_expr(e.lhs)
            push("rax")
            compile_expr(e.rhs)
            pop("rbx")
            // rax :: lhs
            // rbx :: rhs
            add_to_rax("rbx") // rax = lhs + rhs

        }
        case EXPR_NAME:     return compile_name(e.name_lit)
        case EXPR_INIT_VAR: return compile_local_var(e.name_lit, e.type, e.rhs)
        
        default: 
        {
            std.puts("ERROR: Can't compile this expression.\n")
            exit(1)
        }
    }
    makeLabel()    
}
@todo("Struct TYPE")
compile_if :: (If: *STStmt_if){
    end_addr: addr_t = addr_count()
    ifClause: *IfClause = If.ifClause    
    cond: *Type = compile_expr(ifClause.cond)
    commit("\tcmp rax, 0\n")
    jmp_inst_addr("je", end_addr)


}
@todo("CBridge in .pi files")
compile_stmt :: (s: *Stmt): null {        
    switch s.kind 
    {        
        case STMT_EXPR: compile_expr(s.expr)
        case STMT_IF:   compile_if(s.if)
        case STMT_RETURN: {                        
            compile_expr(s.expr)            
            jmp_inst_label("jmp", get_cp_label_end())
        }
        default:
        {
            std.puts("ERROR: Can't compile this statement.\n")
            exit(1)
        }
    }
}
compile_block :: (b: *ll_list)
{
    node: mut *ll_node = b.head
    while node.value 
    {
        compile_stmt(node.value)
        node = node.next
    }
}
extend_string_db :: (inst: *mut *i8, str: *i8){
    *inst = std.cstrcat(*inst, str)
}
compile_data_section :: (){    
    if Global_strings.size == 0     
        return 0
    
    commit("segment .data\n")
    i: mut *ll_node = Global_strings.head
    idx: i64 = 0
    while i.value{
        str: mut *i8 = i.value
        str_size: i64 = std.strlen(str)
        inst: mut *i8 = std.cstrcat("\tS", std.itocstr(idx))
        inst = std.cstrcat(inst, ' db "')
        j: i64 = 0                
        extend_string_db(&inst, str)
        inst = std.cstrcat(inst, '"\n')
        
        commit(inst)        

        i = i.next
        idx = idx + 1
    }    
}


compile_decl_proc :: (name: *i8, func: *DeclProc){
    current_proc = Proc.find(name)
    if not current_proc 
    {
        std.puts("<Internal error> Couldn't find procedure.\n")
        exit(1)
    }
    commit(name)    
    commit(":\n")
    commit(".PB.")  
    commit(name) 
    commit(":\n")    
    push("rbp")    
    commit("\tmov rbp, rsp\n")
    
    if (current_proc.stack_allocation > 0) {
        sub_reg_by_i64("rsp", current_proc.stack_allocation)
    }
        
    compile_block(func.block)
    commit("\tmov rax, 0\n")
    commit(".PE.")  commit(name) commit(":\n")

    commit("\tleave\n")
    commit("\tret\n")

    current_proc = null
}
compile_decl :: (d: *Decl) 
{
    if not d
        return -1 
    
    switch d.kind 
    {
        // Ignore this should be setup in resolve step
        case DECL_CONSTEXPR: 
        {
            inst: mut *i8 = "\t;; MACRO for '"
            inst = std.cstrcat(inst, d.name)
            inst = std.cstrcat(inst, "'\n")

            commit(inst)
        } 
        case DECL_PROC: compile_decl_proc(d.name, d.proc)
        default: 
        {
            std.puts("Idk how to compile this shit.\n")
            exit(1)
        }            
    }
}
compile_builtin_dump :: (){
    commit("dump:\n")
    commit("\tpush  rbp\n")
    commit("\tmov   rbp, rsp\n")
    commit("\tsub   rsp, 64\n")
    commit("\tmov   QWORD  [rbp-56], rdi\n")
    commit("\tmov   QWORD  [rbp-8], 1\n")
    commit("\tmov   eax, 32\n")
    commit("\tsub   rax, QWORD  [rbp-8]\n")
    commit("\tmov   BYTE  [rbp-48+rax], 10\n")
    commit(".L2:\n")
    commit("\tmov   rcx, QWORD  [rbp-56]\n")
    commit("\tmov   rdx, -3689348814741910323\n")
    commit("\tmov   rax, rcx\n")
    commit("\tmul   rdx\n")
    commit("\tshr   rdx, 3\n")
    commit("\tmov   rax, rdx\n")
    commit("\tsal   rax, 2\n")
    commit("\tadd   rax, rdx\n")
    commit("\tadd   rax, rax\n")
    commit("\tsub   rcx, rax\n")
    commit("\tmov   rdx, rcx\n")
    commit("\tmov   eax, edx\n")
    commit("\tlea   edx, [rax+48]\n")
    commit("\tmov   eax, 31\n")
    commit("\tsub   rax, QWORD  [rbp-8]\n")
    commit("\tmov   BYTE  [rbp-48+rax], dl\n")
    commit("\tadd   QWORD  [rbp-8], 1\n")
    commit("\tmov   rax, QWORD  [rbp-56]\n")
    commit("\tmov   rdx, -3689348814741910323\n")
    commit("\tmul   rdx\n")
    commit("\tmov   rax, rdx\n")
    commit("\tshr   rax, 3\n")
    commit("\tmov   QWORD  [rbp-56], rax\n")
    commit("\tcmp   QWORD  [rbp-56], 0\n")
    commit("\tjne   .L2\n")
    commit("\tmov   eax, 32\n")
    commit("\tsub   rax, QWORD  [rbp-8]\n")
    commit("\tlea   rdx, [rbp-48]\n")
    commit("\tlea   rcx, [rdx+rax]\n")
    commit("\tmov   rax, QWORD  [rbp-8]\n")
    commit("\tmov   rdx, rax\n")
    commit("\tmov   rsi, rcx\n")
    commit("\tmov   edi, 1\n")
    commit("\tmov   rax, 1\n")
    commit("\tsyscall\n")
    commit("\tnop\n")
    commit("\tleave\n")
    commit("\tret\n")
}
compile_ast :: (ast: *ll_list){
    commit("BITS 64\n")
    commit("segment .text\n")
    commit("global _start:\n")
    

    compile_builtin_dump()
    decl: mut *ll_node = ast.head    
    while decl.value
    {
        compile_decl(decl.value)
        decl = decl.next
    } 

    // Compile globals
    // TODO
    // global: mut *ll_node = globals.head
    // while global.value 
    // {
    //     // TODO: compile global
    //     global = global.next
    // }

    commit("_start:\n")
    // TODO: Initialize global data
    //call_proc("main")
    commit("\tcall main\n")
    mov_rax_to_i64(60)    
    commit("\tsyscall\n")
    compile_data_section()    
    // Compile to binary    
}
