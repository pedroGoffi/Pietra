#package "pietra.ast"
use std{list}
type ExprKind :: i64

TYPE_NONE                   ::  0
TYPE_UNRESOLVED             ::  1
TYPE_VOID                   ::  2
TYPE_ANY                    ::  3
TYPE_FIRST_ARITHMETRIC_TYPE ::  4
TYPE_I8                     ::  5
TYPE_I16                    ::  6
TYPE_I32                    ::  7
TYPE_I64                    ::  8
TYPE_F32                    ::  9
TYPE_F64                    :: 10
TYPE_LAST_ARITHMETRIC_TYPE  :: 11
TYPE_PTR                    :: 12
TYPE_ARRAY                  :: 13
TYPE_STRUCT                 :: 14
TYPE_UNION                  :: 15
TYPE_PROC                   :: 16
TYPE_CONST                  :: 17
TYPE_SELF                   :: 18
TYPE_ENU                    :: 19

TypeField :: {
    name: imut *i8
    type: *any // *Type
}
TypeArray :: {
    base: *any // *Type
    size: i64
}

TypeProc :: {
    params:     *ll_list
    ret_type:   *any // *Type
    is_varags:  i64
}
TypeAggregate :: {
    is_union:   i64
    size:       i64
    items:      *ll_list // TypeField
}
Type :: {
    kind:       i64
    name:       *i8
    size:       i64
    isSelf:     i64
    isMut:      i64
    isRef:      i64
    base:       *any            // *Type
    array:      *TypeArray
    proc:       *TypeProc
    aggregate:  *TypeAggregate
}
impl Type new :: (kind: i64, is_mut: i64): *Type 
{
    t: *Type = std.allocate(sizeof(Type))
    t.kind = kind
    t.isMut = is_mut    
    return t
}
get_type_int_kind :: (sz: i64): i64
{
    switch sz {
        case 8:     return TYPE_I8
        case 16:    return TYPE_I16
        case 32:    return TYPE_I32
        case 64:    return TYPE_I64
        default:    
        {
            std.puts("Type int wrong size in get_type_int_kind.\n")
            exit(1)
        }
    }
}
type_int :: (sz: i64, is_mut: i64): *Type
{
    t: *Type = Type.new(get_type_int_kind(sz), is_mut)
    t.size = sizeof(i64)
    return t
}
type_ptr :: (base: *Type, is_mut: i64): *Type 
{
    t: *Type = Type.new(TYPE_PTR, is_mut)
    t.size = sizeof(i64)
    t.base as any = base
    return t
}
type_string :: (is_mut: i64): *Type 
{
    return type_ptr(type_int(8, is_mut), is_mut)
}

TYPESPEC_NONE       :: 0
TYPESPEC_NAME       :: 1
TYPESPEC_POINTER    :: 2
TYPESPEC_ARRAY      :: 3
TYPESPEC_PROC       :: 4
TYPESPEC_CONST      :: 5
TYPESPEC_TEMPLATE   :: 6

NULL_T_NAME :: "null"

TypeSpec :: {    
    kind:           i64
    name:           mut *i8
    base:           *any
    resolved_type:  mut *any // *Type   
}
impl TypeSpec new        :: (kind: i64): *Self 
{
    ts: *TypeSpec = std.allocate(sizeof(TypeSpec))
    ts.kind = kind
    return ts
}
impl TypeSpec new_name   :: (name: *i8): *Self 
{
    ts: *TypeSpec = TypeSpec.new(TYPESPEC_NAME)
    ts.name = name    
    return ts
}


EXPR_NONE                   :: 0
EXPR_INT                    :: 1
EXPR_FLOAT                  :: 2
EXPR_STRING                 :: 3
EXPR_NAME                   :: 4
EXPR_INIT_VAR               :: 5
EXPR_COMPOUND               :: 6
EXPR_FIELD                  :: 7
EXPR_COMPOUND_LIST_INDEXING :: 8
EXPR_COMPOUND_NAME          :: 9
EXPR_NEW                    :: 10
EXPR_UNARY                  :: 11
EXPR_BINARY                 :: 12
EXPR_CMP                    :: 13
EXPR_LOGIC                  :: 14
EXPR_CAST                   :: 15
EXPR_TERNARY                :: 16
EXPR_ARRAY_INDEX            :: 17
EXPR_CALL                   :: 18


Expr :: {
    kind:       ExprKind
    tkKind:     TokenKind
    int_lit:    i64
    name_lit:   cstr    
    lhs:        mut *i64 // Expr
    rhs:        mut *i64 // Expr
    type:       mut *TypeSpec
}
expr_init :: (kind: i64): *Expr {
    e: *Expr = std.allocate(sizeof(Expr));
    e.kind = kind;    
    return e;
}

expr_name   :: (name: cstr): *Expr {
    e: *Expr = expr_init(EXPR_NAME);
    e.name_lit = name;
    return e;    
}

expr_int    :: (num: i64): *Expr {
    e: *Expr = expr_init(EXPR_INT);
    e.int_lit = num;
    return e;    
}

expr_string :: (str: cstr): *Expr {
    e: *Expr    = expr_init(EXPR_STRING)
    e.name_lit  = str
    return e
}

expr_binary :: (kind: TokenKind, lhs: *Expr, rhs: *Expr){
    dump(kind)
    e: *Expr            = expr_init(EXPR_BINARY)
    e.tkKind            = kind
    // BUG: casting to avoid crashing
    e.lhs as mut *Expr  = lhs
    e.rhs as mut *Expr  = rhs
    return e
}

expr_var :: (name: *i8, ts: *TypeSpec, rhs: *Expr): *Expr {
    e: *Expr    = expr_init(EXPR_INIT_VAR)
    e.name_lit  = name
    e.type      = ts
    // To avoid segfault in the compiler
    e.rhs  as any = rhs
    return e
}

STMT_NONE   :: 0
STMT_EXPR   :: 1
STMT_IF     :: 2
STMT_RETURN :: 3
// TODO: implementation node STMT_SWITCH
// TODO: implementation node STMT_FOR
// TODO: implementation node STMT_WHILE

IfClause :: {
    cond:           mut *Expr
    block:          mut *ll_node
}

ifClause_init :: (cond: mut *Expr, block: *ll_node): *IfClause {
    clause: *IfClause   = std.allocate(sizeof(IfClause))
    clause.cond         = cond
    clause.block        = block
    return clause
}
STStmt_if :: {   
    ifClause:               mut* IfClause
    elif_clauses:   mut*    mut* IfClause   // List of clauses
    else_block:     mut*    mut* null    
}
STStmt_if_init :: (ifClause: *IfClause, elifs: **IfClause, elseb: **null){
    st_if: *STStmt_if       = std.allocate(sizeof(STStmt_if))
    st_if.ifClause          = ifClause
    st_if.elif_clauses      = elifs
    st_if.else_block        = elseb
    return st_if
}
Stmt :: {    
    kind:   i64
    expr:   mut *Expr    
    if:     mut *STStmt_if
}

stmt_init :: (kind: i64): *Stmt {
    s: *Stmt = std.allocate(sizeof(Stmt));
    s.kind as i64 = kind;    
    return s;
}
stmt_expr :: (e: *Expr){
    s: *Stmt = stmt_init(STMT_EXPR)
    s.expr = e
    return s
}
stmt_return :: (e: *Expr){
    s: *Stmt = stmt_init(STMT_RETURN)
    s.expr = e
    return s
}
stmt_if :: (ifClause: *IfClause, elifs: **IfClause, elseb: **null): *Stmt {
    s: *Stmt = stmt_init(STMT_IF)    
    s.if = STStmt_if_init(ifClause, elifs, elseb)    
    return s
}




DECL_NONE       :: 0 
DECL_VAR        :: 1 
DECL_PROC       :: 2 
DECL_AGGREGATE  :: 3 
DECL_ENUM       :: 4 
DECL_USE        :: 5 
DECL_TYPE       :: 6 
DECL_CONSTEXPR  :: 7 
DECL_IMPL       :: 8 

DeclProc :: {
    params: mut *ll_list
    block:  mut *ll_list
    ret:    mut *TypeSpec  
}
impl DeclProc new :: (params: *ll_list, block: *ll_list, ret: *TypeSpec): *Self 
{
    d: *DeclProc = std.allocate(sizeof(DeclProc))
    d.params    = params
    d.block     = block
    d.ret       = ret
    return d
}

Decl :: {
    kind:  i64
    name:  mut *i8
    proc:  mut *DeclProc
    // For constexpr 
    expr:  mut *any
}

impl Decl new :: (kind: i64, name: *i8)
{
    d: *Decl = std.allocate(sizeof(Decl))
    d.name = name
    d.kind = kind
    return d
}

decl_proc :: (name: imut *i8, params: *ll_list, ret: *Type, block: *ll_list, is_internal: i64): *Decl
{
    d: *Decl = Decl.new(DECL_PROC, name);
    d.proc = DeclProc.new(params, block, ret)    
    return d
}

impl Decl decl_constexpr :: (name: imut *i8, constexpr: *any): *Decl 
{
    d: *Decl = Decl.new(DECL_CONSTEXPR, name);
    d.expr = constexpr
    return d
}


