#package "pietra.lexer"
use selfhost{token, ast, intern}

StreamInfo ::  {
    stream: cstr
    token: *null // TODO
}

stream: cstr

init_stream :: (str: cstr){
    stream = str;
    next_token();    
}

skip_empty      :: (){
    if not *stream return 0

    switch *stream {
        case ' ', '\t', '\n': {
            stream = stream + 1
        }
    }
}
skip_comment    :: (){
    if *stream == '/' {
        if *(stream + 1) == '/' {
            while *stream {
                if *stream == '\n' {
                    stream = stream + 1;
                    skip_empty();
                }
                stream = stream + 1;
            }
        }
    }
}

next_token      :: (){    
    skip_empty();
    skip_comment();        

    token.start = stream;

    if *stream == 0 {
        token.kind = TK_EOF;
        return 0;
    }
    switch *stream {
        case 'a'...'z', 'A'...'Z', '_': {
            while is_keyword(*stream) or is_numeric(*stream) {
                stream = stream + 1;
            }

            token.end = stream;
            token.name = intern_range(token.start, token.end);
            token.kind = TK_NAME
        }

        case '0'...'9': {
            while is_numeric(*stream){
                stream = stream + 1
            }
            token.end = stream;
            token.kind = TK_INT
            token.name = intern_range(token.start, token.end);
        }


        case '+': {
            stream = stream + 1;
            token.end = stream;
            token.name = intern_range(token.start, token.end);
        }

        
        default: {
            std.puts("Undefined token:\n\tascii == ");
            dump(*stream);            
            exit(1)
        }
    }
    
}

is_numeric      :: (c: i64){
    switch c {
        case '0'...'9': return 1
        default: return 0
    }
}
is_keyword      :: (c: i64){
    switch c {
        case 'a'...'z', 'A'...'z', '_': return 1
        default: return 0
    }
}
is_kind         :: (kind: i64){
    return token.kind == kind;
}
expects_kind    :: ();
escape_to_char  :: ();
scan_string     :: ();
scan_char       :: ();
scan_int        :: ();
scan_int_base   :: ();
scan_float      :: ();
char_to_int     :: ();
