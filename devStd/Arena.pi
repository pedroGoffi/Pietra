#package "std.arena"
use std{Vector}

Arena :: {
    blocks_end:     *null
    blocks_begin:   *null
    blocks:         Vector
    ptr:            *null    
}

impl Arena {
    init :: (self: *Self){                            
        self.blocks.init()
        self.blocks_begin = self.blocks_end = self.blocks.begin()        
    }

    grow :: (self: *Self, size: i64) {                                
        self.ptr            = sbrk(size)            
        self.blocks_begin   = self.ptr        
        self.blocks_end     = self.ptr + size;                    
    }
    
    alloc :: (self: *Self, size: i64): *any {
        if not *self {
            self.init()
        }             

        if self.blocks_end - self.blocks_begin < size {            
            self.grow(size);            
        }                    
                        
        ptr: *any = self.ptr;    
        self.ptr = self.ptr + size;                
        
        return ptr;
    }

    free :: (self: *Self) {        
        i: *any = self.blocks_begin;
        
        while i < self.blocks_end {
            *i = 0;
            i = i + 8;
        }        
    }
}

Arena_new :: (): *Arena {
    a: *Arena = sbrk(sizeof(Arena));
    a.init()
    return a
} 
std_arena: *Arena = Arena_new()