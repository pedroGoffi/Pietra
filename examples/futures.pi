use std{std}
use std::test{future}
use std{list}

MAX_SIZE :: 5
COUNT_UNTILL :: MAX_SIZE


await_me_senpai :: (): *Future {
    std.puts("thanks for awaiting me uwu\n")
    return make_done("arigatou")
}

my_async :: (index: i64): *Future {
    f1: *Future  = make_done(index)

    f2: *Future  = make_then(f1, proc(data: *any): *Future{        
        std.puts("Indexing : ");
        std.puti(data)
        std.puts("\n")
        std.puts("Im second future\n")
        return make_done("GOFFI LANGUAGE")
    })

    f3: *Future = make_then(f2, proc(data: *any): *Future {
        std.puts("Im third future\n")
        return make_done("GOFFI LANGUAGE")
    })
    
    f4: *Future = f3.then(proc(item: *any): *Future{
        std.puts("Created by Pedro Henrique Goffi de Paulo, Lang: ")
        std.puts(item)
        std.puts("\n")
        return make_done("done")
    })
    
    return f4.then(proc(item: *i64){
        await(await_me_senpai())
        return make_done(item)
    })
}



main :: (){
    futures: ll_list;
    futures.push(my_async(69))
    futures.push(await(my_async(420))) // 420 should already be calculated in gather
    futures.push(my_async(6969))
       
    async_gather(&futures)
    std.puts("ok\n")    
}