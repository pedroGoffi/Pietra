#package "pietra.std.runtime"

Iterable :: {
    object:         Array
    index:          i64
    begin_func:     proc(Array): i64 
    end_func:       proc(Array): i64
}

Vector :: {    
    __vec:  builtin_vector    
}

impl Vector Vector :: (self: *Self) {    
    self.__vec = make_array()    
}

impl Vector push :: (self: *Self, value: i64) {
    self.__vec.push(value)    
}

impl Vector size :: (self: *Self): i64 {
    return self.__vec.size()
}

impl Vector at :: (self: *Self, index: i64): i64 {
    self.__vec.at(index)
    
}

impl Vector map :: (self: *Self, func: proc(any): any): Vector {
    new_array: Vector = Vector()
    iter = self.as_iter()

    while i := iter.next() {
        new_array.push(func(self.at(i)))    
        i = i + 1
    }
    
    return new_array
}

impl Vector find_if :: (self: *Self, func: proc(any): any): i64 {
    i: i64 = 0
    found: i64 = -1
    while i < self.size() {
        item: any = self.at(i)
        print("FUNC ON ", item, " = ", func(item))
        if func(item) && found == -1 {
            found = i
            
        }
        i = i + 1
    }
    return found
}

impl Vector foreach :: (self: *Self, func: proc(any)) {
    i: i64 = 0
    while i < self.size() {
        func(self.at(i))
        i = i + 1
    }
}



impl Vector as_iter :: (arr: Array): Iterable {
    iter = Iterable()
    iter.object     = arr 
    iter.index      = 0    
    iter.begin_func = proc(obj: Array){ return 0            }
    iter.end_func   = proc(obj: Array){ return obj.size()   }
    
    return iter
}

impl Iterable next :: (self: *Self){
    if self.index < self.end_func(self.object) {
        self.index = self.index + 1        
        return self.object.at(self.index - 1)
    }
    return None    
}
main :: () {    
    arr: Vector = Vector()

    arr.push("hello")    
    arr.push(", ")    
    arr.push("world")    
    
    
    iter = arr.as_iter()
    
    while i := iter.next() {
        print(i)
    }
    
    arr.map(proc(item: string) {
        print("FOREACH: ", item)
    })

    print("OK END")
}